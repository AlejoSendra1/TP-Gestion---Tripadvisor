services:
  db:
    image: "postgres:17.4"
    restart: "on-failure:3"
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USERNAME}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - "./data/postgres:/var/lib/postgresql/data"
      - "./backend/src/main/resources/db/init.sql:/docker-entrypoint-initdb.d/init.sql"
    ports:
      - "127.0.0.1:${DB_EXTERNAL_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: "./backend"
    depends_on:
      db:
        condition: service_healthy
    restart: "on-failure:3"
    environment:
      SPRING_DATASOURCE_USERNAME: "${DB_USERNAME}"
      SPRING_DATASOURCE_PASSWORD: "${DB_PASSWORD}"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/${DB_NAME}"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: "org.postgresql.Driver"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_JPA_SHOW_SQL: "true"
    ports:
      - "${BACKEND_EXTERNAL_PORT}:8080"

  frontend:
    build: "./frontend"
    depends_on:
      - "backend"
    restart: "on-failure:3"
    environment:
      BACKEND_EXTERNAL_URL: "${BACKEND_EXTERNAL_URL}"
      VITE_BASE_API_URL: "${VITE_BASE_API_URL}"
    ports:
      - "${FRONTEND_EXTERNAL_PORT}:80"

  adminer:
    image: "adminer:5.0.4"
    depends_on:
      - "db"
    restart: "on-failure:3"
    ports:
      - "${ADMINER_EXTERNAL_PORT}:8080"